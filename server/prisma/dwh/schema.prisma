datasource db {
    provider  = "postgresql"
    url       = env("DWH_URL")
    directUrl = env("DWH_DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
    output   = "../../node_modules/@prisma/client/dwh"
}

model BusinessDimension {
    businessId       String                @id @default(uuid())
    businessName     String
    productRevenues  ProductRevenueFact[]
    categoryRevenues CategoryRevenueFact[]
    productPrices    BatchPrice[]
    inventoryLevels  InventoryFact[]
    transactions     TransactionFact[]
}

model CategoryDimension {
    categoryId       Int                   @id @default(autoincrement())
    categoryName     String
    hasExpiryDate    Boolean               @default(false)
    products         ProductDimension[]
    categoryRevenues CategoryRevenueFact[]
}

model ProductDimension {
    productId         Int                  @id @default(autoincrement())
    name              String
    categoryId        Int
    nextExpiryDateId  Int?
    nextExpiryDate    DateDimension?       @relation(fields: [nextExpiryDateId], references: [dateId])
    CategoryDimension CategoryDimension    @relation(fields: [categoryId], references: [categoryId])
    productRevenues   ProductRevenueFact[]
    prices            BatchPrice[]
    InventoryFact     InventoryFact[]
    transactions      TransactionFact[]
}

model ProductRevenueFact {
    productId      Int
    businessId     String
    dateId         Int
    revenueAmount  Decimal
    totalUnitsSold Int

    date     DateDimension     @relation(fields: [dateId], references: [dateId])
    business BusinessDimension @relation(fields: [businessId], references: [businessId])
    product  ProductDimension  @relation(fields: [productId], references: [productId])

    @@id([productId, businessId])
}

model CategoryRevenueFact {
    businessId     String
    categoryId     Int
    dateId         Int
    revenueAmount  Decimal
    totalUnitsSold Int

    date     DateDimension     @relation(fields: [dateId], references: [dateId])
    business BusinessDimension @relation(fields: [businessId], references: [businessId])
    category CategoryDimension @relation(fields: [categoryId], references: [categoryId])

    @@id([businessId, categoryId])
}

model BatchPrice {
    productId      Int
    businessId     String
    dateId         Int
    purchase_price Decimal

    date     DateDimension     @relation(fields: [dateId], references: [dateId])
    business BusinessDimension @relation(fields: [businessId], references: [businessId])
    product  ProductDimension  @relation(fields: [productId], references: [productId])

    @@id([productId, businessId])
}

model DateDimension {
    dateId   Int      @id @default(autoincrement())
    fullDate DateTime
    day      Int
    week     Int
    month    Int
    quarter  Int
    year     Int

    productRevenues  ProductRevenueFact[]
    categoryRevenues CategoryRevenueFact[]
    batchPrices      BatchPrice[]
    expiringProducts ProductDimension[]
    inventorylevels  InventoryFact[]
    transactions     TransactionFact[]
}

model InventoryFact {
    productId    Int
    businessId   String
    dateId       Int
    currentStock Int

    business BusinessDimension @relation(fields: [businessId], references: [businessId])
    product  ProductDimension  @relation(fields: [productId], references: [productId])
    date     DateDimension     @relation(fields: [dateId], references: [dateId])

    @@id([productId, businessId, dateId])
}

model TransactionFact {
    transactionId Int     @id @default(autoincrement())
    businessId    String
    productId     Int
    dateId        Int
    amount        Int
    discount      Decimal
    sellingPrice  Decimal
    purchasePrice Decimal

    business BusinessDimension @relation(fields: [businessId], references: [businessId])
    product  ProductDimension  @relation(fields: [productId], references: [productId])
    date     DateDimension     @relation(fields: [dateId], references: [dateId])
}
